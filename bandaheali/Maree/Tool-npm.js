import fetch from "node-fetch";
import config from "../../config.cjs";

const npmInfo = async (m, sock) => {
  const prefix = config.PREFIX;
  const cmd = m.body.startsWith(prefix)
    ? m.body.slice(prefix.length).split(" ")[0].toLowerCase()
    : "";

  const args = m.body.slice(prefix.length).split(" ").slice(1);
  if (cmd === "npm") {
    if (!args.length) {
      return await sock.sendMessage(m.from, { text: "üîç *Please provide a package name!*\nExample: `.npm express`" }, { quoted: m });
    }

    const packageName = args[0];
    const url = `https://registry.npmjs.org/${packageName}`;

    let sentMsg = await sock.sendMessage(m.from, { text: "üîç ùêíùêÑùêÄùêëùêÇùêáùêàùêçùêÜ ùêçùêèùêå.." }, { quoted: m });

    try {
      const response = await fetch(url);
      if (!response.ok) throw new Error("Package not found!");

      const data = await response.json();
      const latestVersion = data["dist-tags"]?.latest || "Unknown";
      const description = data.description || "No description available";
      const author = data.author?.name || "Unknown";
      const homepage = data.homepage || `https://www.npmjs.com/package/${packageName}`;

      const message = `üõ† *ùêíùêöùê´ùê§ùêöùê´-ùêåùêÉ ùêçùê©ùê¶ ùêàùêßùêüùê®*\n\nüì¶ *ùêèùêöùêúùê§ùêöùê†ùêû:* ${packageName}\nüîñ *ùêïùêûùê´ùê¨ùê¢ùê®ùêß:* ${latestVersion}\nüë§ *ùêÄùêÆùê≠ùê°ùê®ùê´:* ${author}\nüìú *ùêÉùêûùê¨ùêúùê´ùê¢ùê©ùê≠ùê¢ùê®ùêß:* ${description}\nüîó *ùêáùê®ùê¶ùêûùêèùêöùê†ùêû:*(${homepage})\n\n*_ùêèùêéùêñùêÑùêëùêÑùêÉ ùêÅùêò ùêíùêÄùêëùêäùêÄùêë-ùêåùêÉ_*`;

      // Animated Typing Effect
      await new Promise(resolve => setTimeout(resolve, 500));
      await sock.sendMessage(m.from, { edit: sentMsg.key, text: "ùêç" });

      await new Promise(resolve => setTimeout(resolve, 500));
      await sock.sendMessage(m.from, { edit: sentMsg.key, text: "ùêçùêè" });

      await new Promise(resolve => setTimeout(resolve, 500));
      await sock.sendMessage(m.from, { edit: sentMsg.key, text: "ùêçùêèùêå" });

      await new Promise(resolve => setTimeout(resolve, 500));
      await sock.sendMessage(m.from, { edit: sentMsg.key, text: "ùêçùêèùêå ùêí" });

      await new Promise(resolve => setTimeout(resolve, 500));
      await sock.sendMessage(m.from, { edit: sentMsg.key, text: "ùêçùêèùêå ùêíùêÑ" });

      await new Promise(resolve => setTimeout(resolve, 500));
      await sock.sendMessage(m.from, { edit: sentMsg.key, text: "ùêçùêèùêå ùêíùêÑùêÄ" });

      await new Promise(resolve => setTimeout(resolve, 500));
      await sock.sendMessage(m.from, { edit: sentMsg.key, text: "ùêçùêèùêå ùêíùêÑùêÄùêë" });

      await new Promise(resolve => setTimeout(resolve, 500));
      await sock.sendMessage(m.from, { edit: sentMsg.key, text: "ùêçùêèùêå ùêíùêÑùêÄùêëùêÇ" });

      await new Promise(resolve => setTimeout(resolve, 500));
      await sock.sendMessage(m.from, { edit: sentMsg.key, text: "ùêçùêèùêå ùêíùêÑùêÄùêëùêÇùêá" });

      await new Promise(resolve => setTimeout(resolve, 500));
      await sock.sendMessage(m.from, { edit: sentMsg.key, text: message });

    } catch (error) {
      await sock.sendMessage(m.from, { edit: sentMsg.key, text: "‚ùå *Package not found or API Error!*" });
    }
  }
};

export default npmInfo;
